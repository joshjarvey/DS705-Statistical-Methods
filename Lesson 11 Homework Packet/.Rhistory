library(DS705data)
library(DS705data)
data("ifanmot")
library(DS705data)
library(psych)
data("ifanmot")
View(ifanmot)
library(DS705data)
library(psych)
data("ifanmot")
matx = cor(ifanmot)
library(DS705data)
library(psych)
data("ifanmot")
data("police")
#matx = cor(ifanmot)
View(police)
library(DS705data)
library(psych)
data("ifanmot")
data("police")
matx = cor(ifanmot["Q1":"Q42"])
View(ifanmot)
library(DS705data)
library(psych)
data("ifanmot")
data("police")
print(ifanmot["Q1":"Q42"])
library(DS705data)
library(psych)
data("ifanmot")
data("police")
matx = cor(ifanmot[1:42])
View(matx)
library(DS705data)
library(psych)
data("ifanmot")
data("police")
matx = cor(ifanmot[1:42])
cortest.bartlett(matx,n=400)
library(DS705data)
library(psych)
data("ifanmot")
data("police")
matx = cor(ifanmot)
library(DS705data)
library(psych)
data("ifanmot")
data("police")
matx = cor(ifanmot[1:42])
cortest.bartlett(matx,n=400)
kmo(matx)
KMO(matx)
output = princomp(ifanmot[,1:42], cor = TRUE)
plot(output, type = "lines")
abline(h=1, lty=2)
#complete a principal component analysis using all 42 questions to get the eigenvalues.
output = princomp(ifanmot[,1:42], cor = TRUE)
#create the scree plot using the output from the above step. Where the line starts to flatten out, this is the number of factors to consider.
plot(output, type = "lines")
#kaiser's rule is the dotted line, but this dataset has >30 variables, so we will focus on the knee of the scree plot to determine factors, 3
abline(h=1, lty=2)
output$sdev^2
#complete a principal component analysis using all 42 questions to get the eigenvalues.
output = princomp(ifanmot[,1:42], cor = TRUE)
#create the scree plot using the output from the above step. Where the line starts to flatten out, this is the number of factors to consider.
plot(output, type = "lines")
#kaiser's rule is the dotted line, but this dataset has >30 variables, so we will focus on the knee of the scree plot to determine factors, 3
abline(h=1, lty=2)
print(output$sdev^2)
#complete a principal component analysis using all 42 questions to get the eigenvalues.
output = princomp(ifanmot[,1:42], cor = TRUE)
#create the scree plot using the output from the above step. Where the line starts to flatten out, this is the number of factors to consider.
#plot(output, type = "lines")
#kaiser's rule is the dotted line, but this dataset has >30 variables, so we will focus on the knee of the scree plot to determine factors, 3
abline(h=1, lty=2)
#complete a principal component analysis using all 42 questions to get the eigenvalues.
output = princomp(ifanmot[,1:42], cor = TRUE)
#create the scree plot using the output from the above step. Where the line starts to flatten out, this is the number of factors to consider.
#plot(output, type = "lines")
#kaiser's rule is the dotted line, but this dataset has >30 variables, so we will focus on the knee of the scree plot to determine factors, 3
#abline(h=1, lty=2)
print(output$sdev^2)
#complete a principal component analysis using all 42 questions to get the eigenvalues.
output = princomp(ifanmot[,1:42], cor = TRUE)
#create the scree plot using the output from the above step. Where the line starts to flatten out, this is the number of factors to consider.
plot(output, type = "lines")
#kaiser's rule is the dotted line, but this dataset has >30 variables, so we will focus on the knee of the scree plot to determine factors, 3
abline(h=1, lty=2)
print((output$sdev^2)>1)
#complete a principal component analysis using all 42 questions to get the eigenvalues.
output = princomp(ifanmot[,1:42], cor = TRUE)
#create the scree plot using the output from the above step. Where the line starts to flatten out, this is the number of factors to consider.
plot(output, type = "lines")
#kaiser's rule is the dotted line, but this dataset has >30 variables, so we will focus on the knee of the scree plot to determine factors, 3
abline(h=1, lty=2)
print(sum((output$sdev^2)>1))
fa.out = principal(ifanmot[,1:42],nfactors = 3,rotate = "varimax")
print.psych(fa.out, cut=0.50, sort = TRUE)
#extract the factors using the principal() function from the psych package
#per the above steps, we identified 9 factors we'd like to extract. We'll use varimax rotation as well.
fa.out2 = principal(ifanmot[,1:42],nfactors = 9,rotate = "varimax")
#print.psych() gives more relevant ouput. We want to see all the variables and what their factor scores are.
#cut off the ones below 0.50 (since they are not strong enough), and sort them.
print.psych(fa.out2, cut=0.50, sort = TRUE)
require(psych)
require(DS705data)
data(ifanmot)
fan <- principal(ifanmot[,1:42],nfactors=9,rotate="varimax")
fulldata <- cbind(ifanmot,fan$scores)
require(plyr)
fulldata <- rename(fulldata,c("RC1"="Fun","RC9"="Social","RC5"="Identification","RC3"="Patriotism","RC4"="Artistic","RC7"="Loyalty","RC2"="Gambling","RC6"="Entertainment","RC8"="Boredom"))  # REPLACE the ? with your factor labels
head(fulldata[,43:54])
