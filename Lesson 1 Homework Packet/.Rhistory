arima_pred12 = forecast(arima_model, 12)
#transforming the data back to the original scale, so we can review and plot it.
arima_pred12$mean = exp(arima_pred12$mean)
arima_pred12$lower = exp(arima_pred12$lower)
arima_pred12$upper = exp(arima_pred12$upper)
arima_pred12$x = exp(arima_pred12$x)
#creating a table to view the forcasted values in original scale.
arima_prediction_results = cbind(arima_pred12$mean, arima_pred12$lower,arima_pred12$upper)
dimnames(arima_prediction_results)[[2]] = c("mean", "Lo 80", "Lo 95", "Hi 80", "Hi 95")
#review the predictions table
arima_prediction_results
#plotting the original data with the forecasted data
plot(arima_pred12,main = "ARIMA Forecasted Examinations for Abbeville HC", ylab = "Number of Examinations", xlab = "Time")
arima_model = arima(ltsabbeville, order = c(4,1,0))
Box.test(arima_model$residuals, type = "Ljung-Box")
#Finally, we can forecast
#forecasting 12 months using the arima_model.
arima_pred12 = forecast(arima_model, 12)
#transforming the data back to the original scale, so we can review and plot it.
arima_pred12$mean = exp(arima_pred12$mean)
arima_pred12$lower = exp(arima_pred12$lower)
arima_pred12$upper = exp(arima_pred12$upper)
arima_pred12$x = exp(arima_pred12$x)
#creating a table to view the forcasted values in original scale.
arima_prediction_results = cbind(arima_pred12$mean, arima_pred12$lower,arima_pred12$upper)
dimnames(arima_prediction_results)[[2]] = c("mean", "Lo 80", "Lo 95", "Hi 80", "Hi 95")
#review the predictions table
arima_prediction_results
#plotting the original data with the forecasted data
plot(arima_pred12,main = "ARIMA Forecasted Examinations for Abbeville HC", ylab = "Number of Examinations", xlab = "Time")
arima_model = auto.arima(ltsabbeville)
#AIC = 50.61.
summary(arima_model)
arima_model = auto.arima(ltsabbeville)
#AIC = 50.61.
summary(arima_model)
#forecasting 12 months using the arima_model.
arima_pred12 = forecast(arima_model, 12)
#transforming the data back to the original scale, so we can review and plot it.
arima_pred12$mean = exp(arima_pred12$mean)
arima_pred12$lower = exp(arima_pred12$lower)
arima_pred12$upper = exp(arima_pred12$upper)
arima_pred12$x = exp(arima_pred12$x)
#creating a table to view the forcasted values in original scale.
arima_prediction_results = cbind(arima_pred12$mean, arima_pred12$lower,arima_pred12$upper)
dimnames(arima_prediction_results)[[2]] = c("mean", "Lo 80", "Lo 95", "Hi 80", "Hi 95")
#review the predictions table
arima_prediction_results
#plotting the original data with the forecasted data
plot(arima_pred12,main = "ARIMA Forecasted Examinations for Abbeville HC", ylab = "Number of Examinations", xlab = "Time")
Acf(arima_model$residuals)
Pacf(arima_model$residuals)
plot(dtsabbeville)
dstsabbeville = diff(dtsabbeville, lag = 12)
plot(dstsabbeville)
Acf(dstsabbeville)
Pacf(dstsabbeville)
arima_model = auto.arima(dstsabbeville)
summary(arima_model)
Acf(arima_model$residuals)
Pacf(arima_model$residuals)
#first: complete a residual plot to verify no trend.
plot(arima_model$residuals,main = "Residual Plot - ARIMA", ylab="Residuals")
#next: does the data fit the theoritical normal
qqnorm(arima_model$residuals,main = "Normal Q-Q Plot - ARIMA")
qqline(arima_model$residuals)
e null that all autocorrelations differ from 0. This is a good thing!
Box.test(arima_model$residuals, type = "Ljung-Box")
arima_pred12 = forecast(arima_model, 12)
#transforming the data back to the original scale, so we can review and plot it.
arima_pred12$mean = exp(arima_pred12$mean)
arima_pred12$lower = exp(arima_pred12$lower)
arima_pred12$upper = exp(arima_pred12$upper)
arima_pred12$x = exp(arima_pred12$x)
#creating a table to view the forcasted values in original scale.
arima_prediction_results = cbind(arima_pred12$mean, arima_pred12$lower,arima_pred12$upper)
dimnames(arima_prediction_results)[[2]] = c("mean", "Lo 80", "Lo 95", "Hi 80", "Hi 95")
#review the predictions table
arima_prediction_results
#plotting the original data with the forecasted data
plot(arima_pred12,main = "ARIMA Forecasted Examinations for Abbeville HC", ylab = "Number of Examinations", xlab = "Time")
arima_model = arima(ltsabbeville, seasonal = list(order = c(4,1,0), period = 12))
summary(arima_model)
Acf(arima_model$residuals)
Pacf(arima_model$residuals)
first: complete a residual plot to verify no trend.
plot(arima_model$residuals,main = "Residual Plot - ARIMA", ylab="Residuals")
#next: does the data fit the theoritical normal distribution? Check residuals
qqnorm(arima_model$residuals,main = "Normal Q-Q Plot - ARIMA")
qqline(arima_model$residuals)
s. This tests if all autocorrelations differ from being 0.
#because the p-value is 0.9446, we cannot reject the null that all autocorrelations differ from 0. This is a good thing!
Box.test(arima_model$residuals, type = "Ljung-Box")
#Finally, we can forecast
#forecasting 12 months using the arima_model.
arima_pred12 = forecast(arima_model, 12)
#transforming the data back to the original scale, so we can review and plot it.
arima_pred12$mean = exp(arima_pred12$mean)
arima_pred12$lower = exp(arima_pred12$lower)
arima_pred12$upper = exp(arima_pred12$upper)
arima_pred12$x = exp(arima_pred12$x)
#creating a table to view the forcasted values in original scale.
arima_prediction_results = cbind(arima_pred12$mean, arima_pred12$lower,arima_pred12$upper)
dimnames(arima_prediction_results)[[2]] = c("mean", "Lo 80", "Lo 95", "Hi 80", "Hi 95")
#review the predictions table
arima_prediction_results
#plotting the original data with the forecasted data
plot(arima_pred12,main = "ARIMA Forecasted Examinations for Abbeville HC", ylab = "Number of Examinations", xlab = "Time")
plot(arima_model$residuals,main = "Residual Plot - ARIMA", ylab="Residuals")
auto.arima(log(tsabbeville))
library(forecast)
library(tseries)
library(readr)
################# Reading in the completed abbeville dataset ##############################
abbeville = read.csv("C:/Users/joshj/Documents/DS700-Intro to Data Science/Final Assignment/Dataset_clean.csv")
################# Creating the Timeseries dataset #######################################
tsabbeville = ts(abbeville$Incoming.Examinations, start = c(2006,1), end = c(2013,12), frequency = 12)
################# Model 1: Holt-Winters Model ################################################
#Create a holt-winters model using the ets() function from the forecast package.
#create a holt-winters model with all exponential components activated: level/error, trend, and seasonal.
#setting the model parameters to "AAA".
#its important to point out this is LOG() incoming exams, so data will have to be re-transformed using EXP() on the way out.
hw_model = ets(log(tsabbeville), model = "AAA")
#AIC = 211.35.
summary(hw_model)
plot(hw_model$residuals,main = "Residual Plot - Holt-Winters", ylab="Residuals")
qqnorm(hw_model$residuals,main = "Normal Q-Q Plot - Holt-Winters")
qqline(hw_model$residuals)
#checking accuracy of my model. RMSE = 0.2570473 (log units)
accuracy(hw_model)
#using the log tranformed holt-winters model to forecast 12 months in advance.
hw_pred12 = forecast(hw_model, 12)
#back-transforming the log() model to original scale.
hw_pred12$mean = exp(hw_pred12$mean)
hw_pred12$lower = exp(hw_pred12$lower)
hw_pred12$upper = exp(hw_pred12$upper)
hw_pred12$x = exp(hw_pred12$x)
#creating a table to view the forcasted values in original scale.
hw_prediction_results = cbind(hw_pred12$mean, hw_pred12$lower,hw_pred12$upper)
dimnames(hw_prediction_results)[[2]] = c("mean", "Lo 80", "Lo 95", "Hi 80", "Hi 95")
#review the results table
hw_prediction_results
#plotting the original data with the forecasted data
plot(hw_pred12, main = "Holt-Winters Forecasted Examinations for Abbeville HC", ylab = "Number of Examinations", xlab = "Time")
############### Model 2: ARIMA method ############################################################
#Checking dataset for stationarity
#first check the number of differencing to perform to make data stationary. This helps determine the d term in the model. d = 1
ndiffs(log(tsabbeville))
dtsabbeville = diff(log(tsabbeville), 1)
#using auto.arima() to identify my p,q values (confirms my differencing = 1)
auto.arima(log(tsabbeville))
#Now building and reviewing my ARIMA model, with an attempt to include the seasonality.
#setting my arima model using those suggested parameters, with seasonality = 12.
arima_model = arima(log(tsabbeville), seasonal = list(order = c(4,1,0), period = 12))
#now check for autocorrelation on the differenced data via an ACF plot. This helps determine the p term of the model.
#lag 17 has a signficant spike, so ill set p = 17.
Acf(arima_model$residuals, main = "Auto-Correlation for Abbeville")
summary(arima_model)
#now check for autocorrelation on the model's residuals - there are no significant spikes for the first few lags
Acf(arima_model$residuals, main = "Auto-Correlation for Abbeville")
Pacf(arima_model$residuals,main = "Partial Auto-Correlation for Abbeville")
summary(arima_model)
st: complete a residual plot to verify no trend.
plot(arima_model$residuals,main = "Residual Plot - ARIMA", ylab="Residuals")
qqnorm(arima_model$residuals,main = "Normal Q-Q Plot - ARIMA")
qqline(arima_model$residuals)
Box.test(arima_model$residuals, type = "Ljung-Box")
accuracy(arima_model)
library(forecast)
library(tseries)
library(readr)
################# Reading in the completed abbeville dataset ##############################
abbeville = read.csv("C:/Users/joshj/Documents/DS700-Intro to Data Science/Final Assignment/Dataset_clean.csv")
################# Creating the Timeseries dataset #######################################
tsabbeville = ts(abbeville$Incoming.Examinations, start = c(2006,1), end = c(2013,12), frequency = 12)
################# Model 1: Holt-Winters Model ################################################
#Create a holt-winters model using the ets() function from the forecast package.
#create a holt-winters model with all exponential components activated: level/error, trend, and seasonal.
#setting the model parameters to "AAA".
#its important to point out this is LOG() incoming exams, so data will have to be re-transformed using EXP() on the way out.
hw_model = ets(log(tsabbeville), model = "AAA")
#AIC = 211.35.
summary(hw_model)
plot(hw_model$residuals,main = "Residual Plot - Holt-Winters", ylab="Residuals")
qqnorm(hw_model$residuals,main = "Normal Q-Q Plot - Holt-Winters")
qqline(hw_model$residuals)
#checking accuracy of my model. RMSE = 0.2570473 (log units)
accuracy(hw_model)
#using the log tranformed holt-winters model to forecast 12 months in advance.
hw_pred12 = forecast(hw_model, 12)
#back-transforming the log() model to original scale.
hw_pred12$mean = exp(hw_pred12$mean)
hw_pred12$lower = exp(hw_pred12$lower)
hw_pred12$upper = exp(hw_pred12$upper)
hw_pred12$x = exp(hw_pred12$x)
#creating a table to view the forcasted values in original scale.
hw_prediction_results = cbind(hw_pred12$mean, hw_pred12$lower,hw_pred12$upper)
dimnames(hw_prediction_results)[[2]] = c("mean", "Lo 80", "Lo 95", "Hi 80", "Hi 95")
#review the results table
hw_prediction_results
#plotting the original data with the forecasted data
plot(hw_pred12, main = "Holt-Winters Forecasted Examinations for Abbeville HC", ylab = "Number of Examinations", xlab = "Time")
############### Model 2: ARIMA method (attempted with seasonality)#######################################
#Checking dataset for stationarity
#first check the number of differencing to perform to make data stationary. This helps determine the d term in the model. d = 1
ndiffs(log(tsabbeville))
dtsabbeville = diff(log(tsabbeville), 1)
#using auto.arima() to identify my p,q values (confirms my differencing = 1)
auto.arima(log(tsabbeville))
#Now building and reviewing my ARIMA model, with an attempt to include the seasonality.
#setting my arima model using those suggested parameters, with seasonality = 12.
arima_model = arima(log(tsabbeville), seasonal = list(order = c(4,1,0), period = 12))
#now check for autocorrelation on the model's residuals - there are no significant spikes for the first few lags.
Acf(arima_model$residuals, main = "Auto-Correlation for Abbeville")
#now check for partial autocorrelation on the model's residuals - there are no significant spikes for the first few lags.
Pacf(arima_model$residuals,main = "Partial Auto-Correlation for Abbeville")
#AIC = 103.61
summary(arima_model)
#evaluating the model fit
#first: complete a residual plot to verify no trend.
plot(arima_model$residuals,main = "Residual Plot - ARIMA", ylab="Residuals")
#next: does the data fit the theoritical normal distribution? Check residuals against a qqplot.
qqnorm(arima_model$residuals,main = "Normal Q-Q Plot - ARIMA")
qqline(arima_model$residuals)
#last: complete a Ljung-Box test on the residuals. This tests if all autocorrelations differ from being 0.
#because the p-value is 0.1176, we cannot reject the null that all autocorrelations differ from 0. This is a good thing!
Box.test(arima_model$residuals, type = "Ljung-Box")
#now lets look at the accuracy measures of the model. Specifically the RMSE to compare to the HW above.
accuracy(arima_model)
#Finally, we can forecast
#forecasting 12 months using the arima_model.
arima_pred12 = forecast(arima_model, 12)
#transforming the data back to the original scale, so we can review and plot it.
arima_pred12$mean = exp(arima_pred12$mean)
arima_pred12$lower = exp(arima_pred12$lower)
arima_pred12$upper = exp(arima_pred12$upper)
arima_pred12$x = exp(arima_pred12$x)
#creating a table to view the forcasted values in original scale.
arima_prediction_results = cbind(arima_pred12$mean, arima_pred12$lower,arima_pred12$upper)
dimnames(arima_prediction_results)[[2]] = c("mean", "Lo 80", "Lo 95", "Hi 80", "Hi 95")
#review the predictions table
arima_prediction_results
#plotting the original data with the forecasted data
plot(arima_pred12,main = "ARIMA Forecasted Examinations for Abbeville HC", ylab = "Number of Examinations", xlab = "Time")
summary(hw_model)
library(forecast)
library(tseries)
library(readr)
################# Reading in the completed abbeville dataset ##############################
abbeville = read.csv("C:/Users/joshj/Documents/DS700-Intro to Data Science/Final Assignment/Dataset_clean.csv")
################# Creating the Timeseries dataset #######################################
tsabbeville = ts(abbeville$Incoming.Examinations, start = c(2006,1), end = c(2013,12), frequency = 12)
fit = nnetar(tsclean(tsabbeville))
View(fit)
fit
tsclean(tsabbeville)
plot(tsclean(tsabbeville))
View(abbeville)
tsabbeville = tsclean(tsabbeville))
tsabbeville = tsclean(tsabbeville)
#plotting the time series - looks like there is a larger variance as time increases, so need to log the data.
plot(tsabbeville)
#logged the data, plotting - the variance has settled slightly, however there is an upward trend, so it needs to be differenced.
ltsabbeville = log(tsabbeville)
plot(ltsabbeville)
#determine number of diffs to perform - d=1.
ndiffs(ltsabbeville)
#diffing the dataset by 1.
dtsabbeville = diff(ltsabbeville, 1)
#plotting the dataset, and it looks stable now.
plot(dtsabbeville)
dstsabbeville = diff(dtsabbeville, lag = 12)
plot(dstsabbeville)
#this combination, acf with negative large spike at 1, and pacf decays into non significance, tells me it shows an MA signature of 1 or 2
Acf(dtsabbeville) # displays a sharp negative
Pacf(dtsabbeville) # displays a decay of significance for the first few spikes.
#fitting my model with 1 diff and 1 MA term.
arima_model1 = arima(ltsabbeville, order = c(0,1,1))
Acf(arima_model1$residuals)
Pacf(arima_model1$residuals)
arima_model2 = arima(tsabbeville, order = c(3,1,1))
arima_model = arima(ltsabbeville, seasonal = list(order = c(4,1,0), period = 12))
auto.arima(ltsabbeville)
arima_model = arima(ltsabbeville, seasonal = list(order = c(4,1,0), period = 12))
summary(arima_model)
Acf(arima_model$residuals)
Pacf(arima_model$residuals)
#first: complete a residual plot to verify no trend.
plot(arima_model$residuals,main = "Residual Plot - ARIMA", ylab="Residuals")
does the data fit the theoritical normal distribution? Check residuals against a qqplot.
qqnorm(arima_model$residuals,main = "Normal Q-Q Plot - ARIMA")
qqline(arima_model$residuals)
annot reject the null that all autocorrelations differ from 0. This is a good thing!
Box.test(arima_model$residuals, type = "Ljung-Box")
#Finally, we can forecast
#forecasting 12 months using the arima_model.
arima_pred12 = forecast(arima_model, 12)
#transforming the data back to the original scale, so we can review and plot it.
arima_pred12$mean = exp(arima_pred12$mean)
arima_pred12$lower = exp(arima_pred12$lower)
arima_pred12$upper = exp(arima_pred12$upper)
arima_pred12$x = exp(arima_pred12$x)
#creating a table to view the forcasted values in original scale.
arima_prediction_results = cbind(arima_pred12$mean, arima_pred12$lower,arima_pred12$upper)
dimnames(arima_prediction_results)[[2]] = c("mean", "Lo 80", "Lo 95", "Hi 80", "Hi 95")
#review the predictions table
arima_prediction_results
#plotting the original data with the forecasted data
plot(arima_pred12,main = "ARIMA Forecasted Examinations for Abbeville HC", ylab = "Number of Examinations", xlab = "Time")
arima_model = arima(ltsabbeville, seasonal = list(order = c(4,1,1), period = 12))
summary(arima_model)
#setting my arima model using those suggested parameters.
arima_model = arima(ltsabbeville, seasonal = list(order = c(4,1,1), period = 12))
#AIC = 50.61.
summary(arima_model)
Acf(arima_model$residuals)
Pacf(arima_model$residuals)
arima_model = arima(ltsabbeville, seasonal = list(order = c(4,1,2), period = 12))
arima_model = arima(ltsabbeville, seasonal = list(order = c(4,1,1), period = 12))
arima_model = arima(ltsabbeville, seasonal = list(order = c(4,2,1), period = 12))
arima_model = arima(ltsabbeville, seasonal = list(order = c(4,2,0), period = 12))
arima_model = arima(ltsabbeville, seasonal = list(order = c(4,1,0), period = 12))
#setting my arima model using those suggested parameters.
arima_model = arima(ltsabbeville, seasonal = list(order = c(4,2,0), period = 12))
summary(arima_model)
Acf(arima_model$residuals)
Pacf(arima_model$residuals)
plot(arima_model$residuals,main = "Residual Plot - ARIMA", ylab="Residuals")
his tests if all autocorrelations differ from being 0.
#because the p-value is 0.9446, we cannot reject the null that all autocorrelations differ from 0. This is a good thing!
Box.test(arima_model$residuals, type = "Ljung-Box")
#Finally, we can forecast
#forecasting 12 months using the arima_model.
arima_pred12 = forecast(arima_model, 12)
#transforming the data back to the original scale, so we can review and plot it.
arima_pred12$mean = exp(arima_pred12$mean)
arima_pred12$lower = exp(arima_pred12$lower)
arima_pred12$upper = exp(arima_pred12$upper)
arima_pred12$x = exp(arima_pred12$x)
#creating a table to view the forcasted values in original scale.
arima_prediction_results = cbind(arima_pred12$mean, arima_pred12$lower,arima_pred12$upper)
dimnames(arima_prediction_results)[[2]] = c("mean", "Lo 80", "Lo 95", "Hi 80", "Hi 95")
#review the predictions table
arima_prediction_results
#plotting the original data with the forecasted data
plot(arima_pred12,main = "ARIMA Forecasted Examinations for Abbeville HC", ylab = "Number of Examinations", xlab = "Time")
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(dplyr)
library(ggformula)
#read in the tweet data, removing neutral tweets. Of 5837 tweets collected, 4171 will be considered for this analysis.
tweets_no_neutral = read_csv("C:/Users/joshj/Documents/GitHub/ds710spring2020finalproject/combined_dataset.csv") %>% filter(Polarity != 0)
#read in the character name count totals.
character_counts = read_csv("C:/Users/joshj/Documents/GitHub/ds710spring2020finalproject/character_frequency.csv", col_names = c("Character", "Frequency"))
#data appears to generally follow a normal distribution.
#evidence of right-skew toward the positive end.
gf_histogram(~ Polarity, data = tweets_no_neutral, color = "blue") %>%
gf_labs(title="Distribution of Tweet Sentiment - Final Fantasy 7 Remake")
#complete the 1-prop test, checking greater than
prop.test(sum(tweets_no_neutral$isPositive), nrow(tweets_no_neutral), p=0.50, alternative = "greater")
#first re-create the character's name column based on order of frequency from least to greatest, then create the bar graph.
character_counts %>%
mutate(Character = reorder(Character, Frequency)) %>%
gf_col(Frequency ~ Character, fill =~ Character) %>%
gf_refine(scale_fill_brewer(palette = "Set2")) %>%
gf_labs(title="Character Name Frequency in Twitter Data",
y="Number of Mentions")
#calculating equal distribution. There are 5 characters, so 1/5 is 0.20 (or 20%)
character_counts = character_counts %>% mutate(equaldistribution = 1/nrow(character_counts))
#checking expected counts for greater than 5. These equally result in expected values of 300
character_counts$equaldistribution * sum(character_counts$Frequency)
#performing a chi-squared goodness of fit test. Null hypothesis is that each characters frequency is equal
chisq.test(character_counts$Frequency, p = character_counts$equaldistribution)
#testing if the most mentioned character in my sample of tweets is being mentioned the majority of the time over the other characters.
prop.test(max(character_counts$Frequency), sum(character_counts$Frequency), p = 0.50, alternative = "greater")
install.packages('swirl')
library(swirl)
install_course('R_Programming')
install_course_github('DataScienceUWL', 'UW_Stat_Methods')
install_course_github('DataScienceUWL')
install_course_github('DataScienceUWL')
install_course_github('DataScienceUWL', 'UW_Stat_Methods')
library(swirl)
swirl()
install.packages("devtools")
swirl()
library(swirl)
swirl()
swirl()
str(HealthExam)
summary(HealthExam)
hf <- HealthExam[HealthExam$Sex=="F",]
summary(hf)
chol <- hf$Cholesterol
summary(chol)
summary(chol)
sd(chol)
var(chol)
quantile(chol)
quantile(chol, .9)
quantile(chol, c(.1,.5,.9))
sort(chol)
quantile(chol, .75) + 1.5*IQR(chol)
upper_cutoff <- quantile(chol, .75) + 1.5*IQR(chol)
3
sum(chol>upper_cutoff)
bye()
exit
library(swirl)
swirl()
2
bye()
swirl()
?pnorm
pnorm(1.3)
pnorm(17, 20, 2)
pnorm(21,20,2,lower.tail = F)
1 - pnorm(21,20,2)
pnorm(21,20,2) - pnorm(17,20,2)
?qnorm
qnorm(.1)
qnorm(.5831, 20 , 2)
qnorm(.75,530,205,lower.tail = F)
qnorm(.75,530,205)
hf <- HealthExam[HealthExam$Sex == "F",]
hf <- subset(HealthExam,HealthExam$Sex=="F")
head(hf)
fd = hf$DiasBP
fd <- hf$DiasBP
fs <- hf$SysBP
boxplot(fs)
1
(max(fs)-mean)
(max(fs)-mean(fs))/sd(fs)
2*pnorm(3.43)
2*pnorm(-3.43)
hist(fs)
qqnorm(fs)
qqline(fs)
5+7
bye()
install.packages(c("astsa", "backports", "bayestestR", "broom", "dbplyr", "dplyr", "effectsize", "ellipsis", "emmeans", "fs", "ggeffects", "ggformula", "ggstance", "glmnet", "insight", "isoband", "knitr", "lifecycle", "lme4", "lubridate", "maptools", "MASS", "mice", "mime", "modelr", "multcomp", "openxlsx", "parameters", "performance", "pillar", "pkgbuild", "plyr", "ps", "purrr", "quantreg", "Rcpp", "RcppArmadillo", "RCurl", "reshape2", "scales", "sjlabelled", "sjstats", "sp", "stringi", "tibble", "tidyr", "tidyselect", "tinytex", "vctrs", "withr", "xfun", "xml2", "yaml", "zoo"))
# Don't modify this chunk of code, it is just installing and loading the DS705data package
if (!require(DS705data)){
if (!require(devtools)){
install.packages('devtools',repos="http://cran.rstudio.com")
}
library(devtools)
install_github('DataScienceUWL/DS705data')
}
require(DS705data)
# load the HealthExam data set into memory
data(HealthExam)
setwd("~/DS705-Statistical-Methods/Lesson 1 Homework Packet")
fs = HealthExam[HealthExam$Sex=="F",]
fs = HealthExam[HealthExam$Sex=="F",]
mean(fs)
fs = HealthExam[HealthExam$Sex=="F",]
mean(fs$Cholesterol)
summary(fs$Cholesterol)
sd(fs$Cholesterol)
hist(fs$Cholesterol)
hist(fs$Cholesterol, xlab = "mg/dl", main = "Female Cholesterol Level")
boxplot(fs$Cholesterol, xlab = "mg/dl")
boxplot(fs$Cholesterol, ylab = "mg/dl")
boxplot(fs$Cholesterol, ylab = "mg/dl",main = "Female Cholesterol Level")
# quantile(fs,.75) gives the third quartile
# IQR(fs) gives the interquartile range
quantile(fs,.75)
# quantile(fs,.75) gives the third quartile
# IQR(fs) gives the interquartile range
quantile(fs$Cholesterol,.75)
# quantile(fs,.75) gives the third quartile
# IQR(fs) gives the interquartile range
quantile(fs$Cholesterol,0.75)+1.5*IQR(fs$Cholesterol)
mean(fs$Cholesterol)
sd(fs$Cholesterol)
(max(fs$Cholesterol) - mean(fs$Cholesterol)) / sd(fs$Cholesterol)
#z-score = (x-mean)/sd
(max(fs$Cholesterol) - mean(fs$Cholesterol)) / sd(fs$Cholesterol)
pnorm(3.65,mean(fs$Cholesterol), sd(fs$Cholesterol))
#z-score = (x-mean)/sd
(max(fs$Cholesterol) - mean(fs$Cholesterol)) / sd(fs$Cholesterol)
qnorm(3.65,mean(fs$Cholesterol), sd(fs$Cholesterol))
#z-score = (x-mean)/sd
(max(fs$Cholesterol) - mean(fs$Cholesterol)) / sd(fs$Cholesterol)
dnorm(3.65,mean(fs$Cholesterol), sd(fs$Cholesterol))
#z-score = (x-mean)/sd
(max(fs$Cholesterol) - mean(fs$Cholesterol)) / sd(fs$Cholesterol)
pnorm(3.65)
#z-score = (x-mean)/sd
(max(fs$Cholesterol) - mean(fs$Cholesterol)) / sd(fs$Cholesterol)
pnorm(-3.65)
#z-score = (x-mean)/sd
(max(fs$Cholesterol) - mean(fs$Cholesterol)) / sd(fs$Cholesterol)
2*pnorm(-3.65)
#z-score = (x-mean)/sd
(max(fs$Cholesterol) - mean(fs$Cholesterol)) / sd(fs$Cholesterol)
prob=2*pnorm(-3.65)
prob*40
#z-score = (x-mean)/sd
(max(fs$Cholesterol) - mean(fs$Cholesterol)) / sd(fs$Cholesterol)
prob=2*pnorm(-3.65)
prob
prob*40
qqplot(fs$Cholesterol)
qqplot(fs$Cholesterol)
qqplot(fs$Cholesterol)
qqnorm(fs$Cholesterol)
qqline(fs$Cholesterol)
qqnorm(fs$Cholesterol, ylab="mg/dl")
qqline(fs$Cholesterol)
