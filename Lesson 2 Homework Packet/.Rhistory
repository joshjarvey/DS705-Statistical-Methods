# Don't modify this chunk of code, it is just installing and loading the DS705data package
if (!require(DS705data)){
if (!require(devtools)){
install.packages('devtools',repos="http://cran.rstudio.com/")
}
library(devtools)
install_github('DataScienceUWL/DS705data')
}
require(DS705data)
# load the HealthExam data set into memory
data(HealthExam)
# r defaults to a 7 by 7 figure (units?), use fig.width and fig.height to adjust
reps <- 1000
n <- 23
sampleStat <- numeric(reps) # initialize the vector
for (i in 1:reps){
sampleStat[i] <- mean( rexp(n) )
}
hist(sampleStat)
hist(rexp(1000))
hist(rexp(1000), main = "Histogram of 1,000 Samples from Exponential Distribution")
hist(rexp(1000), main = "Histogram of 1,000 Samples from Exponential Distribution")
hist(rexp(1000), main = "Histogram of 1,000 Samples from Exponential Distribution")
hist(rexp(1000), main = "Histogram of 1,000 Samples from Exponential Distribution")
hist(rexp(1000), main = "Histogram of 1,000 Samples from Exponential Distribution")
hist(rexp(1000), main = "Histogram of 1,000 Samples from Exponential Distribution")
hist(rexp(1000), main = "Histogram of 1,000 Samples from Exponential Distribution")
hist(rexp(1000), main = "Histogram of 1,000 Samples from Exponential Distribution")
# r defaults to a 7 by 7 figure (units?), use fig.width and fig.height to adjust
reps <- 1000
n <- 10
sampleStat <- numeric(reps) # initialize the vector
for (i in 1:reps){
sampleStat[i] <- mean( rexp(n) )
}
hist(sampleStat)
reps <- 1000
n <- 10
sampleStat <- numeric(reps) # initialize the vector
for (i in 1:reps){
sampleStat[i] <- mean( rexp(n) )
}
hist(sampleStat)
qqnorm(sampleStat)
qqline(sampleStat)
reps <- 1000
n <- 10
sampleStat <- numeric(reps) # initialize the vector
for (i in 1:reps){
sampleStat[i] <- mean( rexp(n) )
}
hist(sampleStat)
qqnorm(sampleStat)
qqline(sampleStat)
#setting 1000 reps of sample size 200.
reps <- 1000
n <- 200
#using the for-loop to calculate the mean of the current rep and store it into a vector
sampleStat <- numeric(reps) # initialize the vector
for (i in 1:reps){
sampleStat[i] <- mean( rexp(n) )
}
hist(sampleStat)
#plotting a QQ plot to access normality.
qqnorm(sampleStat)
qqline(sampleStat)
qnorm(.025)
qnorm(.975)
qnorm(.975)^2
(qnorm(.975)^2)*(0.7^2)/(0.05^2)
round(qnorm(.975)^2)*(0.7^2)/(0.05^2))
round(qnorm(.975)^2)*(0.7^2)/(0.05^2)))
round(qnorm(.975)^2)*(0.7^2)/(0.05^2))
round(qnorm(.975)^2)*(0.7^2)/(0.05^2)
rnorm(50,0,1)
fakeData = rnorm(50,0,1)
fakeData = rnorm(50,0,1)
fakeData = (fakeData - mean(fakeData))/sd(fakeData)
#generate 50 observations from the normal distribution using mean 0, sd 1.
fakeData = rnorm(50,0,1)
#standardize the observations using the z formula: (obs - mean(dataset))/sd(dataset)
fakeData = (fakeData - mean(fakeData))/sd(fakeData)
fakeData = fakeData*0.68 + 5.03
#generate 50 observations from the normal distribution using mean 0, sd 1.
fakeData = rnorm(50,0,1)
#standardize the observations using the z formula: (obs - mean(dataset))/sd(dataset)
fakeData = (fakeData - mean(fakeData))/sd(fakeData)
#now, rescale and shift the data to match the data described in the paragraph above.
fakeData = fakeData*0.68 + 5.03
t.test(fakeData, conf.level = .95)$conf.int
#generate 50 observations from the normal distribution using mean 0, sd 1.
fakeData = rnorm(50,0,1)
#standardize the observations using the z formula: (obs - mean(dataset))/sd(dataset)
fakeData = scale(fakeData)
#now, rescale and shift the data to match the data described in the paragraph above.
fakeData = fakeData*0.68 + 5.03
#finally, perform the t.test and pull out the 95% confidence interval. 4.8 to 5.2, which matches the above in part a.
t.test(fakeData, conf.level = .95)$conf.int
#generate 50 observations from the normal distribution using mean 0, sd 1.
fakeData = rnorm(50,0,1)
#"standardize" the observations using the z-score formula: (obs - mean(dataset))/sd(dataset).
#the scale() function does this automatically, just provide it the vector of observations.
fakeData = scale(fakeData)
#now, rescale and shift the data to match the dataset described in the paragraph above.
fakeData = fakeData*0.68 + 5.03
#finally, perform the t.test and pull out the 95% confidence interval. 4.8 to 5.2, which matches the above in part a.
t.test(fakeData, conf.level = .95)$conf.int
#generate 50 observations from the normal distribution using mean 0, sd 1.
fakeData = rnorm(50,0,1)
#"standardize" the observations using the z-score formula: (obs - mean(dataset))/sd(dataset).
#the scale() function does this automatically, just provide it the vector of observations.
fakeData = scale(fakeData)
#now, rescale and shift the data to match the dataset described in the paragraph above.
fakeData = fakeData*0.68 + 5.03
#finally, perform the t.test and pull out the 95% confidence interval. 4.8 to 5.2, which matches the above in part a.
t.test(fakeData, conf.level = .95)$conf.int
#generate 50 observations from the normal distribution using mean 0, sd 1.
fakeData = rnorm(50,0,1)
#"standardize" the observations using the z-score formula: (obs - mean(dataset))/sd(dataset).
#the scale() function does this automatically, just provide it the vector of observations.
fakeData = scale(fakeData)
#now, rescale and shift the data to match the dataset described in the paragraph above.
fakeData = fakeData*0.68 + 5.03
#finally, perform the t.test and pull out the 95% confidence interval. 4.8 to 5.2, which matches the above in part a.
t.test(fakeData, conf.level = .95)$conf.int
#generate 50 observations from the normal distribution using mean 0, sd 1.
fakeData = rnorm(50,0,1)
#"standardize" the observations using the z-score formula: (obs - mean(dataset))/sd(dataset).
#the scale() function does this automatically, just provide it the vector of observations.
fakeData = scale(fakeData)
#now, rescale and shift the data to match the dataset described in the paragraph above.
fakeData = fakeData*0.68 + 5.03
#finally, perform the t.test and pull out the 95% confidence interval. 4.8 to 5.2, which matches the above in part a.
t.test(fakeData, conf.level = .95)$conf.int
#generate 50 observations from the normal distribution using mean 0, sd 1.
fakeData = rnorm(50,0,1)
#"standardize" the observations using the z-score formula: (obs - mean(dataset))/sd(dataset).
#the scale() function does this automatically, just provide it the vector of observations.
fakeData = scale(fakeData)
#now, rescale and shift the data to match the dataset described in the paragraph above.
fakeData = fakeData*0.68 + 5.03
#finally, perform the t.test and pull out the 95% confidence interval. 4.8 to 5.2, which matches the above in part a.
t.test(fakeData, conf.level = .95)$conf.int
# load csv into data frame
df <- read.csv('ex5-29.TXT')
# put data for lead concentrations in vector called "lead"
lead <- df$Lead
# delete the data frame since we no longer need it
rm(df)
hist(lead)
hist(lead, main = "Distribution of Lead Concentrations of Inshore Waters around Mombasa")
hist(lead, main = "Distribution of Lead Concentrations of Inshore Waters around Mombasa", xlab = "Lead (mg/kg dry weight")
hist(lead, main = "Distribution of Lead Concentrations of Inshore Waters around Mombasa", xlab = "Lead (mg/kg dry weight)")
hist(lead, main = "Distribution of Lead Concentrations of Inshore Waters Around Mombasa", xlab = "Lead (mg/kg dry weight)")
t.test(lead, conf.level = 0.80)$conf.int
t.test(lead, conf.level = 0.90)$conf.int
t.test(lead, conf.level = 0.80)$conf.int
?t.test
t.test(lead, 30, alternative = "greater")
t.test(lead, alternative = "greater", mu = 30)
t.test(lead, alternative = "greater", mu = 30, conf.level = 0.9)
t.test(lead, alternative = "greater", mu = 30)#, conf.level = 0.9)
t.test(lead, alternative = "greater", mu = 30, conf.level = 0.9)
t.test(lead, mu = 30, alternative = "greater", conf.level = 0.9)
B = 5000
bd= replicate(B, sample(lead,replace = TRUE))
View(bd)
B = 5000
rs = replicate(B, sample(lead,replace = TRUE))
bd = apply(rs,2,mean)
B = 5000
rs = replicate(B, sample(lead,replace = TRUE))
bd = apply(rs,2,mean)
hist(bd)
B = 5000
rs = replicate(B, sample(lead,replace = TRUE))
bd = apply(rs,2,mean)
quantile(bd, c(0.10, 0.90))
library(boot)
#load the necessary boot library
library(boot)
#create the auxillary function that returns the mean of the passed in replicated sample.
bootMean <- function(x, i){
return(mean(x[i]))
}
bootObject = boot(lead,bootMean,R=5000)
#load the necessary boot library
library(boot)
#create the auxillary function that returns the mean of the passed in replicated sample.
bootMean <- function(x, i){
return(mean(x[i]))
}
#complete 5000 sampling distributions of the mean statistic from the lead data set.
bootObject = boot(lead,bootMean,R=5000)
plot(bootObject)
#load the necessary boot library
library(boot)
#create the auxillary function that returns the mean of the passed in replicated sample.
bootMean <- function(x, i){
return(mean(x[i]))
}
#complete 5000 sampling distributions of the mean statistic from the lead data set.
bootObject = boot(lead,bootMean,R=5000)
str(bootObject)
#load the necessary boot library
library(boot)
#create the auxillary function that returns the mean of the passed in replicated sample.
bootMean <- function(x, i){
return(mean(x[i]))
}
#complete 5000 sampling distributions of the mean statistic from the lead data set.
bootObject = boot(lead,bootMean,R=10000)
plot(bootObject)
#load the necessary boot library
library(boot)
#create the auxillary function that returns the mean of the passed in replicated sample.
bootMean <- function(x, i){
return(mean(x[i]))
}
#complete 5000 sampling distributions of the mean statistic from the lead data set.
bootObject = boot(lead,bootMean,R=100000)
plot(bootObject)
#load the necessary boot library
library(boot)
#create the auxillary function that returns the mean of the passed in replicated sample.
bootMean <- function(x, i){
return(mean(x[i]))
}
#complete 5000 sampling distributions of the mean statistic from the lead data set.
bootObject = boot(lead,bootMean,R=5000)
plot(bootObject)
#load the necessary boot library
library(boot)
#create the auxillary function that returns the mean of the passed in replicated sample.
bootMean <- function(x, i){
return(mean(x[i]))
}
#complete 5000 sampling distributions of the mean statistic from the lead data set.
bootObject = boot(lead,bootMean,R=5000)
boot.ci(bootObject,type = 'bca')
#load the necessary boot library
library(boot)
#create the auxillary function that returns the mean of the passed in replicated sample.
bootMean <- function(x, i){
return(mean(x[i]))
}
#complete 5000 sampling distributions of the mean statistic from the lead data set.
bootObject = boot(lead,bootMean,R=5000)
boot.ci(bootObject,conf = 0.80,type = 'bca')
#load the necessary boot library
library(boot)
#create the auxillary function that returns the mean of the passed in replicated sample.
bootMean <- function(x, i){
return(mean(x[i]))
}
#complete 5000 sampling distributions of the mean statistic from the lead data set.
bootObject = boot(lead,bootMean,R=5000)
#create an 80% confidence interval, of type BCa (bias corrected & accelerated) from the bootstrapped distribution.
boot.ci(bootObject,conf = 0.80,type = 'bca')$BCa
#load the necessary boot library
library(boot)
#create the auxillary function that returns the mean of the passed in replicated sample.
bootMean <- function(x, i){
return(mean(x[i]))
}
#complete 5000 sampling distributions of the mean statistic from the lead data set.
bootObject = boot(lead,bootMean,R=5000)
#create an 80% confidence interval, of type BCa (bias corrected & accelerated) from the bootstrapped distribution.
boot.ci(bootObject,conf = 0.80,type = 'bca')
t.test(lead, conf.level = 0.80)
t.test(lead, conf.level = 0.80)$conf.int
#load the necessary boot library
library(boot)
#create the auxillary function that returns the mean of the passed in replicated sample.
bootMean <- function(x, i){
return(mean(x[i]))
}
#complete 5000 sampling distributions of the mean statistic from the lead data set.
bootObject = boot(lead,bootMean,R=5000)
#create an 80% confidence interval, of type BCa (bias corrected & accelerated) from the bootstrapped distribution.
boot.ci(bootObject,conf = 0.90,type = 'bca')
#load the necessary boot library
library(boot)
#create the auxillary function that returns the mean of the passed in replicated sample.
bootMean <- function(x, i){
return(mean(x[i]))
}
#complete 5000 sampling distributions of the mean statistic from the lead data set.
bootObject = boot(lead,bootMean,R=5000)
#create an 80% confidence interval, of type BCa (bias corrected & accelerated) from the bootstrapped distribution.
boot.ci(bootObject,conf = 0.80,type = 'bca')
#load the necessary boot library
library(boot)
#create the auxillary function that returns the mean of the passed in replicated sample.
bootMean <- function(x, i){
return(mean(x[i]))
}
#complete 5000 sampling distributions of the mean statistic from the lead data set.
bootObject = boot(lead,bootMean,R=5000)
#create an 80% confidence interval, of type BCa (bias corrected & accelerated) from the bootstrapped distribution.
boot.ci(bootObject,conf = 0.90,type = 'bca')
#load the necessary boot library
library(boot)
#create the auxillary function that returns the mean of the passed in replicated sample.
bootMean <- function(x, i){
return(mean(x[i]))
}
#complete 5000 sampling distributions of the mean statistic from the lead data set.
bootObject = boot(lead,bootMean,R=5000)
#create an 80% confidence interval, of type BCa (bias corrected & accelerated) from the bootstrapped distribution.
boot.ci(bootObject,conf = 0.80,type = 'bca')
power.t.test(n=37,sd=37.1,delta = 10,
sig.level = 0.10
type = "one.sample",
power.t.test(n=37,sd=37.1,delta = 10,
sig.level = 0.10,
type = "one.sample",
alternative = "one.sided")
power.t.test(n = 37, sd = 37.1, delta = 10, sig.level = 0.10,
type = "one.sample",
alternative = "one.sided")$power
power.t.test(power = 0.90, sd = 37.1, delta = 10, sig.level = 0.10,
type = "one.sample",
alternative = "one.sided")$n
round(power.t.test(power = 0.90, sd = 37.1, delta = 10, sig.level = 0.10,
type = "one.sample",
alternative = "one.sided")$n)
power.t.test(power = 0.90, sd = 37.1, delta = 10, sig.level = 0.10,
type = "one.sample",
alternative = "one.sided")$n
ceiling(power.t.test(n = 37, sd = 37.1, delta = 10, sig.level = 0.10,
type = "one.sample",
alternative = "one.sided")$power)
power.t.test(n = 37, sd = 37.1, delta = 10, sig.level = 0.10,
type = "one.sample",
alternative = "one.sided")$power
ceiling(power.t.test(power = 0.90, sd = 37.1, delta = 10, sig.level = 0.10,
type = "one.sample",
alternative = "one.sided")$n)
#first, find the t-value using the qnorm at 97.5%
#second, using the formula n = t^2*s^2/E^2, we find the sample size required is 784.
ceiling(qnorm(.975)^2)*(0.7^2)/(0.05^2)
#load the necessary boot library
library(boot)
#create the auxillary function that returns the mean of the passed in replicated sample.
bootMean <- function(x, i){
return(mean(x[i]))
}
#complete 5000 sampling distributions of the mean statistic from the lead data set.
bootObject = boot(lead,bootMean,R=5000)
#create an 80% confidence interval, of type BCa (bias corrected & accelerated) from the bootstrapped distribution.
boot.ci(bootObject,conf = 0.90,type = 'bca')
#load the necessary boot library
library(boot)
#create the auxillary function that returns the mean of the passed in replicated sample.
bootMean <- function(x, i){
return(mean(x[i]))
}
#complete 5000 sampling distributions of the mean statistic from the lead data set.
bootObject = boot(lead,bootMean,R=5000)
#create an 80% confidence interval, of type BCa (bias corrected & accelerated) from the bootstrapped distribution.
boot.ci(bootObject,conf = 0.80,type = 'bca')
