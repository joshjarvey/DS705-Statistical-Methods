#create a matrix to store the data within. first is bank by outstanding and not, then by credit union in the 2nd row.
financial_ratings = matrix(c(70,150,66,81),nrow = 2, byrow=TRUE)
#label the columns and rows accordingly.
colnames(financial_ratings) = c("Outstanding", "Not Outstanding")
rownames(financial_ratings) = c("Bank", "Credit Union")
#create a matrix to store the data within. first is bank by outstanding and not, then by credit union in the 2nd row.
financial_ratings = matrix(c(70,150,66,81),nrow = 2, byrow=TRUE)
#label the columns and rows accordingly.
colnames(financial_ratings) = c("Outstanding", "Not Outstanding")
rownames(financial_ratings) = c("Bank", "Credit Union")
financial_ratings
#create a matrix to store the data within. first is bank by outstanding and not, then by credit union in the 2nd row.
financial_ratings = matrix(c(70,150,66,81),nrow = 2, byrow=TRUE)
#label the columns and rows accordingly.
colnames(financial_ratings) = c("Outstanding", "Not Outstanding")
rownames(financial_ratings) = c("Bank", "Credit Union")
margin.table(financial_ratings)
#create a matrix to store the data within. first is bank by outstanding and not, then by credit union in the 2nd row.
financial_ratings = matrix(c(70,150,66,81),nrow = 2, byrow=TRUE)
#label the columns and rows accordingly.
colnames(financial_ratings) = c("Outstanding", "Not Outstanding")
rownames(financial_ratings) = c("Bank", "Credit Union")
margin.table(financial_ratings,1)
#create a matrix to store the data within. first is bank by outstanding and not, then by credit union in the 2nd row.
financial_ratings = matrix(c(70,150,66,81),nrow = 2, byrow=TRUE)
#label the columns and rows accordingly.
colnames(financial_ratings) = c("Outstanding", "Not Outstanding")
rownames(financial_ratings) = c("Bank", "Credit Union")
margin.table(financial_ratings,1:2)
#create a matrix to store the data within. first is bank by outstanding and not, then by credit union in the 2nd row.
financial_ratings = matrix(c(70,150,66,81),nrow = 2, byrow=TRUE)
#label the columns and rows accordingly.
colnames(financial_ratings) = c("Outstanding", "Not Outstanding")
rownames(financial_ratings) = c("Bank", "Credit Union")
margin.table(financial_ratings,1:3)
#create a matrix to store the data within. first is bank by outstanding and not, then by credit union in the 2nd row.
financial_ratings = matrix(c(70,150,66,81),nrow = 2, byrow=TRUE)
#label the columns and rows accordingly.
colnames(financial_ratings) = c("Outstanding", "Not Outstanding")
rownames(financial_ratings) = c("Bank", "Credit Union")
margin.table(financial_ratings,1:)
#create a matrix to store the data within. first is bank by outstanding and not, then by credit union in the 2nd row.
financial_ratings = matrix(c(70,150,66,81),nrow = 2, byrow=TRUE)
#label the columns and rows accordingly.
colnames(financial_ratings) = c("Outstanding", "Not Outstanding")
rownames(financial_ratings) = c("Bank", "Credit Union")
margin.table(financial_ratings,1:2)
#perform a prop.test to check for the true population of credit unions that recieve an outstanding rating.
prop.test(66,81, correct = TRUE)
#create a matrix to store the data within. first is bank by outstanding and not, then by credit union in the 2nd row.
financial_ratings = matrix(c(70,150,66,81),nrow = 2, byrow=TRUE)
#label the columns and rows accordingly.
colnames(financial_ratings) = c("Outstanding", "Not Outstanding")
rownames(financial_ratings) = c("Bank", "Credit Union")
margin.table(financial_ratings,1:2)
#perform a prop.test to check for the true population of credit unions that recieve an outstanding rating.
prop.test(66,81, correct = TRUE)
#re-jigging the matrix: this puts credit union's outstanding first, then bank's outstanding
outstanding = c(financial_ratings[2,1],financial_ratings[1,1])
#re-jigging the matrix: this puts credit union's not outstanding first, then bank's not outstanding
not_outstanding = c(financial_ratings[2,2],financial_ratings[1,2])
#prop.test for cu/bank outstanding, vs cu/bank not outstanding.
prop.test(outstanding,not_outstanding, correct = FALSE)
#pull the number of not outstanding ratings for banks
bank_not_outstanding = financial_ratings[1,2]
#pull the number of outstanding ratings for banks
bank_outstanding = financial_ratings[1,1]
#not outstanding / row total (i.e. outstanding + not outstanding). Multiply by 100 to get percent.
bank_not_outstanding/(bank_outstanding + bank_not_outstanding)*100
#pull the number of not outstanding ratings for credit unions
creditUnion_not_outstanding = financial_ratings[2,2]
#pull the number of outstanding ratings for credit unions
creditUnion_outstanding = financial_ratings[2,1]
#not outstanding / row total (i.e. outstanding + not outstanding). Multiply by 100 to get percent.
creditUnion_not_outstanding/(creditUnion_outstanding + creditUnion_not_outstanding)*100
#storing the proportion of "not outstanding" risk into variables.
bank_prop_not_outstanding = (bank_not_outstanding/(bank_outstanding + bank_not_outstanding))
creditUnion_prop_not_outstanding = (creditUnion_not_outstanding/(creditUnion_outstanding + creditUnion_not_outstanding))
#interpreting the relative risk ratio as a percentage.
#take the absolute value of 1 minus the resulting ratio calculation.
#then multiply this by 100, and you have a percentage.
abs(1-(bank_prop_not_outstanding/creditUnion_prop_not_outstanding))*100
#load mosaic package.
library(mosaic)
#credit union is the 'odds2' value here.
oddsRatio(financial_ratings, verbose = TRUE)
#bank is the 'odds1' value here.
oddsRatio(financial_ratings, verbose = TRUE)
#!!!IS THIS NEEDED????!!!!
#swap outstanding and not outstanding columns. To get proper odds ratio for "outstanding
#financial_ratings = matrix(c(150,70,81,66),nrow = 2, byrow=TRUE)
#colnames(financial_ratings) = c("Not Outstanding", "Outstanding")
#rownames(financial_ratings) = c("Bank", "Credit Union")
#odds ratio is setting credit union as the numerator (odds2), and bank as the denominator (odds1).
oddsRatio(financial_ratings, verbose = TRUE)
#check the confidence interval of the OR.
oddsRatio(financial_ratings, verbose = TRUE)
#create a matrix storing the data.
market_purchase = matrix(c(28,44,54,39), nrow = 1, byrow=TRUE)
colnames(market_purchase) = c("Under 18", "18 to 35", "36 to 50", "Over 50")
rownames(market_purchase) = c("Count")
#pull out the observations into a vector.
observed = market_purchase[1,]
#specify the stated probability proportions.
prob = c(0.13,0.32,0.38,0.17)
#perform the chi-sq test with the observations and probabilities.
chisq.test(x=observed,p=prob)
#to check expected counts, we must first take the sum of all the observations. We then multiple the sum against each claimed probabilty and ensure they are at least 5 or greater.
sum(market_purchase)*prob
#create a barplot using the observed values sorted by age bracket. Set colors.
barplot(observed, names.arg = c("Under 18", "18 to 35", "36 to 50", "Over 50"),
ylab = "Count", col = c("purple", "blue", "red","green"))
#create a matrix storing the data.
seatbelt = matrix(c(17,12,2,8), nrow = 2, byrow=TRUE)
colnames(seatbelt) = c("Teen", "Senior")
rownames(seatbelt) = c("Always Wear","Not Always Wear")
#perform a fisher exact test since the observations are too small for a chi-sq test.
fisher.test(seatbelt)
#load in the anesthesia data set.
library(DS705data)
data("anesthesia")
#pull a subset of the data - anesthetic and nausea, as a 2x2 table.
drug_nausea = table(anesthesia$anesthetic,anesthesia$nausea)
#display table with flanking total margins.
addmargins(drug_nausea)
#create a barplot using the 2x2 table. Each bar "set" is a column based on nausea. Within the set, we use side-by-side for the given anesthetic. We set distinct colors, and add a legend using the rownames from the table as the setting.
barplot(drug_nausea,xlab = "Nausea", ylab = "Frequency", col = c("blue", "green"), legend = rownames(drug_nausea), beside = TRUE, main = "Observations of nausea per a given anesthetic")
#create a matrix to store the data within. first is bank by outstanding and not, then by credit union in the 2nd row.
financial_ratings = matrix(c(70,150,66,81),nrow = 2, byrow=TRUE)
#label the columns and rows accordingly.
colnames(financial_ratings) = c("Outstanding", "Not Outstanding")
rownames(financial_ratings) = c("Bank", "Credit Union")
margin.table(financial_ratings,1:2)
#perform a prop.test to check for the true population of credit unions that recieve an outstanding rating.
prop.test(66,81, correct = TRUE)
#re-jigging the matrix: this puts credit union's outstanding first, then bank's outstanding
outstanding = c(financial_ratings[2,1],financial_ratings[1,1])
#re-jigging the matrix: this puts credit union's not outstanding first, then bank's not outstanding
not_outstanding = c(financial_ratings[2,2],financial_ratings[1,2])
#prop.test for cu/bank outstanding, vs cu/bank not outstanding.
prop.test(outstanding,not_outstanding, correct = FALSE)
#pull the number of not outstanding ratings for banks
bank_not_outstanding = financial_ratings[1,2]
#pull the number of outstanding ratings for banks
bank_outstanding = financial_ratings[1,1]
#not outstanding / row total (i.e. outstanding + not outstanding). Multiply by 100 to get percent.
bank_not_outstanding/(bank_outstanding + bank_not_outstanding)*100
#pull the number of not outstanding ratings for credit unions
creditUnion_not_outstanding = financial_ratings[2,2]
#pull the number of outstanding ratings for credit unions
creditUnion_outstanding = financial_ratings[2,1]
#not outstanding / row total (i.e. outstanding + not outstanding). Multiply by 100 to get percent.
creditUnion_not_outstanding/(creditUnion_outstanding + creditUnion_not_outstanding)*100
#storing the proportion of "not outstanding" risk into variables.
bank_prop_not_outstanding = (bank_not_outstanding/(bank_outstanding + bank_not_outstanding))
creditUnion_prop_not_outstanding = (creditUnion_not_outstanding/(creditUnion_outstanding + creditUnion_not_outstanding))
#interpreting the relative risk ratio as a percentage.
#take the absolute value of 1 minus the resulting ratio calculation.
#then multiply this by 100, and you have a percentage.
abs(1-(bank_prop_not_outstanding/creditUnion_prop_not_outstanding))*100
#load mosaic package.
library(mosaic)
#credit union is the 'odds2' value here.
oddsRatio(financial_ratings, verbose = TRUE)
#bank is the 'odds1' value here.
oddsRatio(financial_ratings, verbose = TRUE)
#!!!IS THIS NEEDED????!!!!
#swap outstanding and not outstanding columns. To get proper odds ratio for "outstanding
#financial_ratings = matrix(c(150,70,81,66),nrow = 2, byrow=TRUE)
#colnames(financial_ratings) = c("Not Outstanding", "Outstanding")
#rownames(financial_ratings) = c("Bank", "Credit Union")
#odds ratio is setting credit union as the numerator (odds2), and bank as the denominator (odds1).
oddsRatio(financial_ratings, verbose = TRUE)
#check the confidence interval of the OR.
oddsRatio(financial_ratings, verbose = TRUE)
#create a matrix storing the data.
market_purchase = matrix(c(28,44,54,39), nrow = 1, byrow=TRUE)
colnames(market_purchase) = c("Under 18", "18 to 35", "36 to 50", "Over 50")
rownames(market_purchase) = c("Count")
#pull out the observations into a vector.
observed = market_purchase[1,]
#specify the stated probability proportions.
prob = c(0.13,0.32,0.38,0.17)
#perform the chi-sq test with the observations and probabilities.
chisq.test(x=observed,p=prob)
#to check expected counts, we must first take the sum of all the observations. We then multiple the sum against each claimed probabilty and ensure they are at least 5 or greater.
sum(market_purchase)*prob
#create a barplot using the observed values sorted by age bracket. Set colors.
barplot(observed, names.arg = c("Under 18", "18 to 35", "36 to 50", "Over 50"),
ylab = "Count", col = c("purple", "blue", "red","green"))
#create a matrix storing the data.
seatbelt = matrix(c(17,12,2,8), nrow = 2, byrow=TRUE)
colnames(seatbelt) = c("Teen", "Senior")
rownames(seatbelt) = c("Always Wear","Not Always Wear")
#perform a fisher exact test since the observations are too small for a chi-sq test.
fisher.test(seatbelt)
#load in the anesthesia data set.
library(DS705data)
data("anesthesia")
#pull a subset of the data - anesthetic and nausea, as a 2x2 table.
drug_nausea = table(anesthesia$anesthetic,anesthesia$nausea)
#display table with flanking total margins.
addmargins(drug_nausea)
#create a barplot using the 2x2 table. Each bar "set" is a column based on nausea. Within the set, we use side-by-side for the given anesthetic. We set distinct colors, and add a legend using the rownames from the table as the setting.
barplot(drug_nausea,xlab = "Nausea", ylab = "Frequency", col = c("blue", "green"), legend = rownames(drug_nausea), beside = TRUE, main = "Observations of nausea per a given anesthetic")
#perform chi-sq() test for independence between the type of anesthetic used and if nausea is experienced. This uses the original dataset, and will automatically calculate sums and totals.
chisq.test(anesthesia$anesthetic,anesthesia$nausea)
#create a matrix to store the data within. first is bank by outstanding and not, then by credit union in the 2nd row.
financial_ratings = matrix(c(70,150,66,81),nrow = 2, byrow=TRUE)
#label the columns and rows accordingly.
colnames(financial_ratings) = c("Outstanding", "Not Outstanding")
rownames(financial_ratings) = c("Bank", "Credit Union")
addmargins(financial_ratings)
#create a barplot using the observed values sorted by age bracket. Set colors.
barplot(observed, names.arg = c("Under 18", "18 to 35", "36 to 50", "Over 50"),
ylab = "Count", col = c("purple", "blue", "red","green"), main = "Number of online shoppers by age group")
#create a barplot using the observed values sorted by age bracket. Set colors.
barplot(observed, names.arg = c("Under 18", "18 to 35", "36 to 50", "Over 50"),
ylab = "Count", col = c("purple", "blue", "red","green"), main = "Number of online shoppers by age group", xlab = "Age Group")
#create a barplot using the observed values sorted by age bracket. Set colors.
barplot(observed, names.arg = c("Under 18", "18 to 35", "36 to 50", "Over 50"),
ylab = "Count", col = c("purple", "blue", "red","green"), main = "Number of Online Shoppers by Age Group", xlab = "Age Group")
