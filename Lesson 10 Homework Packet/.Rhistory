# Do not change this chunk
set.seed(124)
T0 = 900;
T1 = 100;
x = c( rnorm(T0), rnorm(T1, mean = 3))
P = pnorm(x, lower.tail = FALSE )
sum(P<0.05)
test = P > 0.05
test = P > 0.05
test0 = test[1:T0]
test1 = test[(T0+1):(T0+T1)]
summary(test0)
summary(test1)
test = P > 0.05
test0 = test[1:T0]
test1 = test[(T0+1):(T0+T1)]
summary(test0)
summary(test1)
#type I error rate
sum(test0==FALSE)/T0
##type II error rate
sum(test1==FALSE)/T1
##False discovery rate (FDR)
sum(test0==FALSE)/(sum(test0==FALSE)+sum(test1==FALSE))
btest = p.adjust(P,method = "bonf") > 0.05
btest0 = btest[1:T0]
btest1 = btest[(T0+1):(T0+T1)]
summary(btest0)
summary(btest1)
#type I error rate
sum(btest0==FALSE)/T0
##type II error rate
sum(btest1==FALSE)/T1
##False discovery rate (FDR)
sum(btest0==FALSE)/(sum(btest0==FALSE)+sum(btest1==FALSE))
bhtest = p.adjust(P,method = "holm") > 0.05
bhtest0 = bhtest[1:T0]
bhtest1 = bhtest[(T0+1):(T0+T1)]
bhsummary(test0)
bhtest = p.adjust(P,method = "holm") > 0.05
bhtest0 = bhtest[1:T0]
bhtest1 = bhtest[(T0+1):(T0+T1)]
summary(bhtest0)
summary(bhtest1)
#type I error rate
sum(bhtest0==FALSE)/T0
##type II error rate
sum(bhtest1==FALSE)/T1
##False discovery rate (FDR)
sum(bhtest0==FALSE)/(sum(bhtest0==FALSE)+sum(bhtest1==FALSE))
fdrt = p.adjust(P,method = "holm") > 0.05
fdrt0 = fdrt[1:T0]
fdrt1 = fdrt[(T0+1):(T0+T1)]
summary(fdrt0)
summary(fdrt1)
#type I error rate
sum(fdrt0==FALSE)/T0
##type II error rate
sum(fdrt1==FALSE)/T1
##False discovery rate (FDR)
sum(fdrt0==FALSE)/(sum(fdrt0==FALSE)+sum(fdrt1==FALSE))
fdrt = p.adjust(P,method = "BH") > 0.05
fdrt0 = fdrt[1:T0]
fdrt1 = fdrt[(T0+1):(T0+T1)]
summary(fdrt0)
summary(fdrt1)
#type I error rate
sum(fdrt0==FALSE)/T0
##type II error rate
sum(fdrt1==FALSE)/T1
##False discovery rate (FDR)
sum(fdrt0==FALSE)/(sum(fdrt0==FALSE)+sum(fdrt1==FALSE))
# Do not change this chunk of code
if (!require(MASS)){
install.packages('MASS')
library(MASS)
}
data(Cars93)
Cars93 <- Cars93[Cars93$Type != 'Van',]
Cars93$Type <- factor(Cars93$Type) # recasting Type forces the factor levels to reset
# shorten level labels to make them fit on boxplots
# Cm = Compact
# Lg = Large
# Md = Midsize
# Sm = Small
# Sp = Sporty
Cars93$Type <- factor(Cars93$Type,labels=c('Cm','Lg','Md','Sm','Sp'))
View(Cars93)
boxplot(RPM~Type)
boxplot(RPM~Type, data = Cars93)
boxplot(RPM~Type, data = Cars93, xlab = "Car Type", main = "Distribution of RPM by car type")
boxplot(RPM~Type, data = Cars93, xlab = "Car Type", main = "Distribution of RPM by vehicle type")
pairwise.t.test(RPM,Type, p.adjust.method = "none", pool.sd = TRUE)$p.value
pairwise.t.test(RPM,Type, data=Cars93, p.adjust.method = "none", pool.sd = TRUE)$p.value
with(Cars93, pairwise.t.test(RPM,Type, p.adjust.method = "none", pool.sd = TRUE)$p.value)
with(Cars93, pairwise.t.test(RPM,Type, p.adjust.method = "none", pool.sd = TRUE)$p.value) < 0.05
#using the Cars93 dataset, conduct pairwise t-tests with no correction and pooled variance.
#Use a 5% significance level for testing between pairs.
with(Cars93, pairwise.t.test(RPM,Type, p.adjust.method = "bonf", pool.sd = TRUE)$p.value) < 0.05
#using the Cars93 dataset, conduct pairwise t-tests with no correction and pooled variance.
#Use a 5% significance level for testing between pairs.
with(Cars93, pairwise.t.test(RPM,Type, p.adjust.method = 'bonf', pool.sd = TRUE)$p.value) < 0.05
#using the Cars93 dataset, conduct pairwise t-tests with no correction and pooled variance.
#Use a 5% significance level for testing between pairs.
with(Cars93, pairwise.t.test(RPM,Type, p.adjust.method = "bonf", pool.sd = TRUE)$p.value) < 0.05
library(DS705data)
library(DS705data)
onewayComp(RPM~Type,data = Cars93,var.equal = TRUE,adjust = "bonferroni")
library(DS705data)
onewayComp(RPM~Type,data = Cars93,var.equal = TRUE,adjust = "bonferroni")$comp[,c(2,3,6,7)]
onewayComp(RPM~Type,data = Cars93,var.equal = TRUE,adjust = "bonferroni")$comp[,c(2,3,6,7)]
onewayComp(RPM~Type,data = Cars93,var.equal = TRUE,adjust = "one.step")$comp[,c(2,3,6,7)]
onewayComp(RPM~Type,data = Cars93,var.equal = TRUE,adjust = "one.step", nboot = 10000)$comp[,c(2,3,6,7)]
boxplot(Price~Type,horizontal=TRUE,data=Cars93)
onewayComp(RPM~Type,data = Cars93,var.equal = FALSE,adjust = "one.step")$comp[,c(2,3,6,7)]
onewayComp(Price~Type,data = Cars93,var.equal = FALSE,adjust = "one.step")$comp[,c(2,3,6,7)]
onewayComp(Price~Type,data = Cars93, conf = 0.90, var.equal = FALSE,adjust = "one.step")$comp[,c(2,3,6,7)]
onewayComp(Price~Type,data = Cars93, var.equal = FALSE,adjust = "one.step")$comp[,c(2,3,6,7)]
onewayComp(Price~Type,data = Cars93, var.equal = FALSE,adjust = "one.step", nboot = 10000)$comp[,c(2,3,6,7)]
#using the onewaycomp() function, complete a bootstrapped version of the games-howell (var.equals=FALSE) test to generate confidence intervals
onewayComp(Price~Type,data = Cars93, var.equal = FALSE,adjust = "bonf", nboot = 10000)$comp[,c(2,3,6,7)]
# Do not change this chunk
set.seed(124)
T0 = 900;
T1 = 100;
x = c( rnorm(T0), rnorm(T1, mean = 3))
P = pnorm(x, lower.tail = FALSE )
#counting the number of times the pnorm function return a value under 0.05. These are our discoveries.
sum(P<0.05)
test = P > 0.05
test0 = test[1:T0]
test1 = test[(T0+1):(T0+T1)]
summary(test0)
summary(test1)
#type I error rate
sum(test0==FALSE)/T0
##type II error rate
sum(test1==FALSE)/T1
##False discovery rate (FDR)
sum(test0==FALSE)/(sum(test0==FALSE)+sum(test1==FALSE))
btest = p.adjust(P,method = "bonf") > 0.05
btest0 = btest[1:T0]
btest1 = btest[(T0+1):(T0+T1)]
summary(btest0)
summary(btest1)
#type I error rate
sum(btest0==FALSE)/T0
##type II error rate
sum(btest1==FALSE)/T1
##False discovery rate (FDR)
sum(btest0==FALSE)/(sum(btest0==FALSE)+sum(btest1==FALSE))
bhtest = p.adjust(P,method = "holm") > 0.05
bhtest0 = bhtest[1:T0]
bhtest1 = bhtest[(T0+1):(T0+T1)]
summary(bhtest0)
summary(bhtest1)
#type I error rate
sum(bhtest0==FALSE)/T0
##type II error rate
sum(bhtest1==FALSE)/T1
##False discovery rate (FDR)
sum(bhtest0==FALSE)/(sum(bhtest0==FALSE)+sum(bhtest1==FALSE))
fdrt = p.adjust(P,method = "BH") > 0.05
fdrt0 = fdrt[1:T0]
fdrt1 = fdrt[(T0+1):(T0+T1)]
summary(fdrt0)
summary(fdrt1)
#type I error rate
sum(fdrt0==FALSE)/T0
##type II error rate
sum(fdrt1==FALSE)/T1
##False discovery rate (FDR)
sum(fdrt0==FALSE)/(sum(fdrt0==FALSE)+sum(fdrt1==FALSE))
# Do not change this chunk of code
if (!require(MASS)){
install.packages('MASS')
library(MASS)
}
data(Cars93)
Cars93 <- Cars93[Cars93$Type != 'Van',]
Cars93$Type <- factor(Cars93$Type) # recasting Type forces the factor levels to reset
# shorten level labels to make them fit on boxplots
# Cm = Compact
# Lg = Large
# Md = Midsize
# Sm = Small
# Sp = Sporty
Cars93$Type <- factor(Cars93$Type,labels=c('Cm','Lg','Md','Sm','Sp'))
boxplot(RPM~Type, data = Cars93, xlab = "Car Type", main = "Distribution of RPM by vehicle type")
#using the Cars93 dataset, conduct pairwise t-tests with no correction and pooled variance.
#Use a 5% significance level for testing between pairs.
with(Cars93, pairwise.t.test(RPM,Type, p.adjust.method = "none", pool.sd = TRUE)$p.value) < 0.05
#using the Cars93 dataset, conduct pairwise t-tests with no correction and pooled variance.
#Use a 5% significance level for testing between pairs.
with(Cars93, pairwise.t.test(RPM,Type, p.adjust.method = "bonf", pool.sd = TRUE)$p.value) < 0.05
library(DS705data)
onewayComp(RPM~Type,data = Cars93,var.equal = TRUE,adjust = "bonferroni")$comp[,c(2,3,6,7)]
onewayComp(RPM~Type,data = Cars93,var.equal = TRUE,adjust = "one.step")$comp[,c(2,3,6,7)]
onewayComp(RPM~Type,data = Cars93,var.equal = TRUE,adjust = "one.step", nboot = 10000)$comp[,c(2,3,6,7)]
boxplot(Price~Type,horizontal=TRUE,data=Cars93)
#using the onewaycomp() function, complete a games-howell (var.equals=FALSE)test to generate pairwise confidence intervals for car prices-type
onewayComp(Price~Type,data = Cars93, var.equal = FALSE,adjust = "one.step")$comp[,c(2,3,6,7)]
#using the onewaycomp() function, complete a bootstrapped version of the games-howell (var.equals=FALSE) test to generate confidence intervals
onewayComp(Price~Type,data = Cars93, var.equal = FALSE,adjust = "one.step", nboot = 10000)$comp[,c(2,3,6,7)]
#using the onewaycomp() function, complete a bootstrapped version of the games-howell (var.equals=FALSE) test to generate confidence intervals
onewayComp(Price~Type,data = Cars93, var.equal = FALSE,adjust = "bonf", nboot = 10000)$comp[,c(2,3,6,7)]
library(boot)
bootMedDiff <- function(d,i){
meds = tapply(d[i,1],d[i,2],median)
c(meds[3]-meds[1],meds[3]-meds[2],meds[1]-meds[2],)
}
library(boot)
bootMedDiff <- function(d,i){
meds = tapply(d[i,1],d[i,2],median)
c(meds[3]-meds[1],meds[3]-meds[2],meds[1]-meds[2],)
}
boot.object = boot(Cars93,bootMedDiff,R=5000,strata = Cars93$Type)
library(boot)
bootMedDiff <- function(d,i){
meds = tapply(d[i,1],d[i,2],median)
c(meds[3]-meds[1],meds[3]-meds[2],meds[1]-meds[2],)
}
boot.object = boot(Cars93,bootMedDiff(Cars93$Price),R=5000,strata = Cars93$Type)
library(boot)
bootMedDiff <- function(d,i){
meds = tapply(d[i,1],d[i,2],median)
c(meds[3]-meds[1],meds[3]-meds[2],meds[1]-meds[2],)
}
boot.object = boot(Cars93,bootMedDiff(Price~Type),R=5000,strata = Cars93$Type)
library(boot)
bootMedDiff <- function(d,i){
meds = tapply(d[i,1],d[i,2],median)
c(meds[3]-meds[1],meds[3]-meds[2],meds[1]-meds[2],)
}
boot.object = boot(Cars93,bootMedDiff(Price~Type),R=5000,strata = Cars93$Type)
library(boot)
bootMedDiff <- function(d,i){
meds = tapply(d[i,1],d[i,2],median)
c(meds[3]-meds[1],meds[3]-meds[2],meds[1]-meds[2],)
}
#boot.object = boot(Cars93,bootMedDiff(Price~Type),R=5000,strata = Cars93$Type)
Cars93[,1]
library(boot)
bootMedDiff <- function(d,i){
meds = tapply(d[i,1],d[i,2],median)
c(meds[3]-meds[1],meds[3]-meds[2],meds[1]-meds[2],)
}
#boot.object = boot(Cars93,bootMedDiff(Price~Type),R=5000,strata = Cars93$Type)
Cars93[,c("Price")]
library(boot)
bootMedDiff <- function(d,i){
meds = tapply(d[i,1],d[i,2],median)
c(meds[3]-meds[1],meds[3]-meds[2],meds[1]-meds[2],)
}
#boot.object = boot(Cars93,bootMedDiff(Price~Type),R=5000,strata = Cars93$Type)
Cars93[,c("Price","Type")]
library(boot)
bootMedDiff <- function(d,i){
meds = tapply(d[i,1],d[i,2],median)
c(meds[3]-meds[1],meds[3]-meds[2],meds[1]-meds[2],)
}
boot.object = boot(Cars93,bootMedDiff(Cars93[,c("Price","Type")]),R=5000,strata = Cars93$Type)
library(boot)
bootMedDiff <- function(d,i){
meds = tapply(d[i,1],d[i,2],median)
c(meds[3]-meds[1],meds[3]-meds[2],meds[1]-meds[2])
}
boot.object = boot(Cars93,bootMedDiff(Cars93[,c("Price","Type")]),R=5000,strata = Cars93$Type)
library(boot)
bootMedDiff <- function(d,i){
meds = tapply(d[i,1],d[i,2],median)
c(meds[3]-meds[1],meds[3]-meds[2],meds[1]-meds[2])
}
boot.object = boot(Cars93[,c("Price","Type")],bootMedDiff(),R=5000,strata = Cars93$Type)
library(boot)
bootMedDiff <- function(d,i){
meds = tapply(d[i,1],d[i,2],median)
c(meds[3]-meds[1],meds[3]-meds[2],meds[1]-meds[2])
}
boot.object = boot(Cars93[,c("Price","Type")],bootMedDiff,R=5000,strata = Cars93$Type)
library(boot)
bootMedDiff <- function(d,i){
meds = tapply(d[i,1],d[i,2],median)
c(meds[3]-meds[1],meds[3]-meds[2],meds[1]-meds[2])
}
boot.object = boot(Cars93[,c("Price","Type")],bootMedDiff,R=5000,strata = Cars93$Type)
boot.ci(boot.object, conf = 1 - 0.10/3, type = "bca", index = 1)$bca[4:5]
library(boot)
bootMedDiff <- function(d,i){
meds = tapply(d[i,1],d[i,2],median)
c(meds[3]-meds[1],meds[3]-meds[2],meds[1]-meds[2])
}
boot.object = boot(Cars93[,c("Price","Type")],bootMedDiff,R=5000,strata = Cars93$Type)
boot.ci(boot.object, conf = 1 - 0.10/3, type = "bca", index = 1)
library(boot)
bootMedDiff <- function(d,i){
meds = tapply(d[i,1],d[i,2],median)
c(meds[3]-meds[1],meds[3]-meds[2],meds[1]-meds[2])
}
boot.object = boot(Cars93[,c("Price","Type")],bootMedDiff,R=5000,strata = Cars93$Type)
boot.ci(boot.object, conf = 1 - 0.10/3, type = "bca", index = 1)$bca[4:5]
boot.ci(boot.object, conf = 1 - 0.10/3, type = "bca", index = 2)$bca[4:5]
boot.ci(boot.object, conf = 1 - 0.10/3, type = "bca", index = 3)$bca[4:5]
boot.ci(boot.object, conf = 1 - 0.10/3, type = "bca", index = 4)$bca[4:5]
library(boot)
bootMedDiff <- function(d,i){
meds = tapply(d[i,1],d[,2],median)
c(meds[3]-meds[1],meds[3]-meds[2],meds[1]-meds[2])
}
boot.object = boot(Cars93[,c("Price","Type")],bootMedDiff,R=5000,strata = Cars93$Type)
boot.ci(boot.object, conf = 1 - 0.10/3, type = "bca", index = 1)$bca[4:5]
boot.ci(boot.object, conf = 1 - 0.10/3, type = "bca", index = 2)$bca[4:5]
boot.ci(boot.object, conf = 1 - 0.10/3, type = "bca", index = 3)$bca[4:5]
boot.ci(boot.object, conf = 1 - 0.10/3, type = "bca", index = 4)$bca[4:5]
library(boot)
bootMedDiff <- function(d,i){
meds = tapply(d[i,1],d[,2],median)
print(meds)
c(meds[3]-meds[1],meds[3]-meds[2],meds[1]-meds[2])
}
boot.object = boot(Cars93[,c("Price","Type")],bootMedDiff,R=5000,strata = Cars93$Type)
boot.ci(boot.object, conf = 1 - 0.10/3, type = "bca", index = 1)$bca[4:5]
boot.ci(boot.object, conf = 1 - 0.10/3, type = "bca", index = 2)$bca[4:5]
boot.ci(boot.object, conf = 1 - 0.10/3, type = "bca", index = 3)$bca[4:5]
boot.ci(boot.object, conf = 1 - 0.10/3, type = "bca", index = 4)$bca[4:5]
library(boot)
bootMedDiff <- function(d,i){
meds = tapply(d[i,1],d[,2],median)
print(meds[1])
c(meds[3]-meds[1],meds[3]-meds[2],meds[1]-meds[2])
}
boot.object = boot(Cars93[,c("Price","Type")],bootMedDiff,R=5000,strata = Cars93$Type)
library(boot)
bootMedDiff <- function(d,i){
meds = tapply(d[i,1],d[,2],median)
c(meds[5]-meds[1],
meds[5]-meds[2],
meds[5]-meds[3],
meds[5]-meds[4],
meds[4]-meds[3],
meds[4]-meds[2],
meds[4]-meds[1],
meds[3]-meds[2],
meds[3]-meds[1],
meds[2]-meds[1])
}
boot.object = boot(Cars93[,c("Price","Type")],bootMedDiff,R=5000,strata = Cars93$Type)
boot.ci(boot.object, conf = 1 - 0.10/3, type = "bca", index = 1)$bca[4:5]
boot.ci(boot.object, conf = 1 - 0.10/3, type = "bca", index = 2)$bca[4:5]
boot.ci(boot.object, conf = 1 - 0.10/3, type = "bca", index = 3)$bca[4:5]
boot.ci(boot.object, conf = 1 - 0.10/3, type = "bca", index = 4)$bca[4:5]
library(boot)
bootMedDiff <- function(d,i){
meds = tapply(d[i,1],d[,2],median)
c(meds[5]-meds[1],#Sp-Cm
meds[5]-meds[2],#Sp-Lg
meds[5]-meds[3],#SP-Md
meds[5]-meds[4],#Sp-Sm
meds[4]-meds[3],#Sm-Md
meds[4]-meds[2],#Sm-Lg
meds[4]-meds[1],#Sm-Cm
meds[3]-meds[2],#Md-Lg
meds[3]-meds[1],#Md-Cm
meds[2]-meds[1])#Lg-Cm
}
boot.object = boot(Cars93[,c("Price","Type")],bootMedDiff,R=5000,strata = Cars93$Type)
#Comparison: Sp-Cm
boot.ci(boot.object, conf = 1 - 0.10/3, type = "bca", index = 1)$bca[4:5]
#Comparison: Sp-Lg
boot.ci(boot.object, conf = 1 - 0.10/3, type = "bca", index = 2)$bca[4:5]
#Comparison: SP-Md
boot.ci(boot.object, conf = 1 - 0.10/3, type = "bca", index = 3)$bca[4:5]
#Comparison: Sp-Sm
boot.ci(boot.object, conf = 1 - 0.10/3, type = "bca", index = 4)$bca[4:5]
#Comparison: Sm-Md
boot.ci(boot.object, conf = 1 - 0.10/3, type = "bca", index = 5)$bca[4:5]
#Comparison: Sm-Lg
boot.ci(boot.object, conf = 1 - 0.10/3, type = "bca", index = 6)$bca[4:5]
#Comparison: Sm-Cm
boot.ci(boot.object, conf = 1 - 0.10/3, type = "bca", index = 7)$bca[4:5]
#Comparison: Md-Lg
boot.ci(boot.object, conf = 1 - 0.10/3, type = "bca", index = 8)$bca[4:5]
#Comparison: Md-Cm
boot.ci(boot.object, conf = 1 - 0.10/3, type = "bca", index = 9)$bca[4:5]
#Comparison: Lg-Cm
boot.ci(boot.object, conf = 1 - 0.10/3, type = "bca", index = 10)$bca[4:5]
library(boot)
bootMedDiff <- function(d,i){
meds = tapply(d[i,1],d[,2],median)
c(meds[5]-meds[1],#Sp-Cm
meds[5]-meds[2],#Sp-Lg
meds[5]-meds[3],#SP-Md
meds[5]-meds[4]#,#Sp-Sm
#meds[4]-meds[3],#Sm-Md
#meds[4]-meds[2],#Sm-Lg
#meds[4]-meds[1],#Sm-Cm
#meds[3]-meds[2],#Md-Lg
#meds[3]-meds[1],#Md-Cm
#meds[2]-meds[1] #Lg-Cm
)
}
boot.object = boot(Cars93[,c("Price","Type")],bootMedDiff,R=5000,strata = Cars93$Type)
#Sporty Cars vs. other
#Comparison: Sp-Cm
boot.ci(boot.object, conf = 1 - 0.10/10, type = "bca", index = 1)$bca[4:5]
#Comparison: Sp-Lg
boot.ci(boot.object, conf = 1 - 0.10/10, type = "bca", index = 2)$bca[4:5]
#Comparison: SP-Md
boot.ci(boot.object, conf = 1 - 0.10/10, type = "bca", index = 3)$bca[4:5]
#Comparison: Sp-Sm
boot.ci(boot.object, conf = 1 - 0.10/10, type = "bca", index = 4)$bca[4:5]
#Small Cars vs. other (sporty already in above section)
#Comparison: Sm-Md
#boot.ci(boot.object, conf = 1 - 0.10/10, type = "bca", index = 5)$bca[4:5]
#Comparison: Sm-Lg
#boot.ci(boot.object, conf = 1 - 0.10/10, type = "bca", index = 6)$bca[4:5]
#Comparison: Sm-Cm
#boot.ci(boot.object, conf = 1 - 0.10/10, type = "bca", index = 7)$bca[4:5]
#Medium Cars vs. other (sporty & small already in the above section)
#Comparison: Md-Lg
#boot.ci(boot.object, conf = 1 - 0.10/10, type = "bca", index = 8)$bca[4:5]
#Comparison: Md-Cm
#boot.ci(boot.object, conf = 1 - 0.10/10, type = "bca", index = 9)$bca[4:5]
#Large Cars vs. other (sporty & small & medium already in the above section)
#Comparison: Lg-Cm
#boot.ci(boot.object, conf = 1 - 0.10/10, type = "bca", index = 10)$bca[4:5]
#load the bootstrap package
library(boot)
#creating the auxiliary function - it requires a dataframe "d", where the quantitative variable of interest is in column1
#column2 contains the factor variable
bootMedDiff <- function(d,i){
#use tapply to apply the median() calculation to the values (re)sampled from the bootstrap.
meds = tapply(d[i,1],d[,2],median)
c(meds[5]-meds[1],#Sp-Cm
meds[5]-meds[2],#Sp-Lg
meds[5]-meds[3],#SP-Md
meds[5]-meds[4]#,#Sp-Sm
#meds[4]-meds[3],#Sm-Md
#meds[4]-meds[2],#Sm-Lg
#meds[4]-meds[1],#Sm-Cm
#meds[3]-meds[2],#Md-Lg
#meds[3]-meds[1],#Md-Cm
#meds[2]-meds[1] #Lg-Cm
)
}
boot.object = boot(Cars93[,c("Price","Type")],bootMedDiff,R=5000,strata = Cars93$Type)
#Sporty Cars vs. other
#Comparison: Sp-Cm
boot.ci(boot.object, conf = 1 - 0.10/4, type = "bca", index = 1)$bca[4:5]
#Comparison: Sp-Lg
boot.ci(boot.object, conf = 1 - 0.10/4, type = "bca", index = 2)$bca[4:5]
#Comparison: SP-Md
boot.ci(boot.object, conf = 1 - 0.10/4, type = "bca", index = 3)$bca[4:5]
#Comparison: Sp-Sm
boot.ci(boot.object, conf = 1 - 0.10/4, type = "bca", index = 4)$bca[4:5]#<-- this appears to be the only one 3.20 to 14.75 difference.
##### instructions say these additional CI's are not needed #####
#Small Cars vs. other (sporty already in above section)
#Comparison: Sm-Md
#boot.ci(boot.object, conf = 1 - 0.10/10, type = "bca", index = 5)$bca[4:5]
#Comparison: Sm-Lg
#boot.ci(boot.object, conf = 1 - 0.10/10, type = "bca", index = 6)$bca[4:5]
#Comparison: Sm-Cm
#boot.ci(boot.object, conf = 1 - 0.10/10, type = "bca", index = 7)$bca[4:5]
#Medium Cars vs. other (sporty & small already in the above section)
#Comparison: Md-Lg
#boot.ci(boot.object, conf = 1 - 0.10/10, type = "bca", index = 8)$bca[4:5]
#Comparison: Md-Cm
#boot.ci(boot.object, conf = 1 - 0.10/10, type = "bca", index = 9)$bca[4:5]
#Large Cars vs. other (sporty & small & medium already in the above section)
#Comparison: Lg-Cm
#boot.ci(boot.object, conf = 1 - 0.10/10, type = "bca", index = 10)$bca[4:5]
